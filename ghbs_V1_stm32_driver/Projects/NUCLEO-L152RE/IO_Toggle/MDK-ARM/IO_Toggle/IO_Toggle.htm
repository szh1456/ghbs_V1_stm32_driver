<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [IO_Toggle\IO_Toggle.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image IO_Toggle\IO_Toggle.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Feb 27 19:57:26 2020
<BR><P>
<H3>Maximum Stack Usage =        768 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ad9250_setup &rArr; ad9250_jesd204b_setup &rArr; ad9250_jesd204b_test_mode &rArr; ad9250_set_bits_to_reg &rArr; ad9250_write &rArr; spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[40]">AES_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32l1xx_it.o(i.BusFault_Handler) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[41]">COMP_ACQ_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[20]">COMP_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[1f]">DAC_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[3b]">DMA2_Channel1_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[3c]">DMA2_Channel2_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel3_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel4_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel5_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32l1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32l1xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l1xx_it.o(i.HardFault_Handler) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[22]">LCD_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32l1xx_it.o(i.MemManage_Handler) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l1xx_it.o(i.NMI_Handler) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32l1xx_it.o(i.PendSV_Handler) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[38]">SPI3_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32l1xx_it.o(i.SVC_Handler) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32l1xx_it.o(i.SysTick_Handler) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[43]">SystemInit</a> from system_stm32l1xx.o(i.SystemInit) referenced from startup_stm32l1xx_xl.o(.text)
 <LI><a href="#[c]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[24]">TIM10_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[25]">TIM11_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[37]">TIM5_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[35]">TIM6_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[36]">TIM7_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[23]">TIM9_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[39]">UART4_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[3a]">UART5_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[34]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32l1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32l1xx_xl.o(.text) referenced from startup_stm32l1xx_xl.o(RESET)
 <LI><a href="#[44]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l1xx_xl.o(.text)
 <LI><a href="#[45]">fputc</a> from main.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[42]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[44]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[46]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>COMP_ACQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[47]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[a9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[aa]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_WriteStatusRegister
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_aux_sync
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI15_10_IRQHandler &rArr; EXTI_GetITStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l1xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI_ClearITPendingBit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>EXTI_GetITStatus</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32l1xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI_GetITStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>EXTI_Init</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, stm32l1xx_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
</UL>

<P><STRONG><a name="[51]"></a>Force_Sync_GPIOInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l1xx_nucleo.o(i.Force_Sync_GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Force_Sync_GPIOInit &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>GPIO_Init</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, stm32l1xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SPI_LowLevel_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SPI_LowLevel_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Force_Sync_GPIOInit
</UL>

<P><STRONG><a name="[54]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, stm32l1xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_PinAFConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SPI_LowLevel_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SPI_LowLevel_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>

<P><STRONG><a name="[55]"></a>GPIO_ResetBits</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l1xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_ResetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_cs_low
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_set_cs_low
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>GPIO_SetBits</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l1xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_SetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_cs_high
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_set_cs_high
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IP_Debug</STRONG> (Thumb, 338 bytes, Stack size 0 bytes, stm32l1xx_ip_dbg.o(i.IP_Debug))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>NVIC_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NVIC_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l1xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_AHBPeriphClockCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SPI_LowLevel_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SPI_LowLevel_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Force_Sync_GPIOInit
</UL>

<P><STRONG><a name="[58]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l1xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SPI_LowLevel_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>

<P><STRONG><a name="[59]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32l1xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SPI_LowLevel_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
</UL>

<P><STRONG><a name="[69]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[5a]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32l1xx_spi.o(i.SPI_BiDirectionalLineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_BiDirectionalLineConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SPI_LowLevel_AlterDirection
</UL>

<P><STRONG><a name="[5b]"></a>SPI_Cmd</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32l1xx_spi.o(i.SPI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Cmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SPI_LowLevel_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SPI_LowLevel_Init
</UL>

<P><STRONG><a name="[5c]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l1xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_I2S_GetFlagStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SendDummyByte
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SendByte
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SendByte
</UL>

<P><STRONG><a name="[5d]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_I2S_ReceiveData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SendDummyByte
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SendByte
</UL>

<P><STRONG><a name="[5e]"></a>SPI_I2S_SendData</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32l1xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SendByte
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SendByte
</UL>

<P><STRONG><a name="[5f]"></a>SPI_Init</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, stm32l1xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SPI_LowLevel_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SPI_LowLevel_Init
</UL>

<P><STRONG><a name="[60]"></a>STM_EVAL_COMInit</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32l1xx_nucleo.o(i.STM_EVAL_COMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = STM_EVAL_COMInit &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_USART_DEBUG_Init
</UL>

<P><STRONG><a name="[63]"></a>STM_EVAL_PBInit</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, stm32l1xx_nucleo.o(i.STM_EVAL_PBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = STM_EVAL_PBInit &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>STM_USART_DEBUG_Init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, stm32l1xx_nucleo.o(i.STM_USART_DEBUG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STM_USART_DEBUG_Init &rArr; STM_EVAL_COMInit &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32l1xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SYSCFG_EXTILineConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, system_stm32l1xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>TimingDelay_Decrement</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.TimingDelay_Decrement))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[62]"></a>USART_Cmd</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l1xx_usart.o(i.USART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Cmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>

<P><STRONG><a name="[68]"></a>USART_GetFlagStatus</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32l1xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_GetFlagStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[61]"></a>USART_Init</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, stm32l1xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>

<P><STRONG><a name="[6a]"></a>USART_SendData</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32l1xx_usart.o(i.USART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_xl.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ad]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[4d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_transfer
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_WriteStatusRegister
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ReadStatusRegister
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_isOkay
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_detect
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_srq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_outs
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_global
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_aux_sync
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_isOkay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_detect
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_srq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_out_sysref
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_out_dclk
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_global
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[af]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6f]"></a>ad9250_config_print</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ad9250.o(i.ad9250_config_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ad9250_config_print &rArr; ad9250_read &rArr; spi_readbyte_glue &rArr; adc_ReadStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_read
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>ad9250_create</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, ad9250.o(i.ad9250_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ad9250_create
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>ad9250_fast_detect_setup</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ad9250.o(i.ad9250_fast_detect_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ad9250_fast_detect_setup &rArr; ad9250_write &rArr; spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_setup
</UL>

<P><STRONG><a name="[7b]"></a>ad9250_is_shadow_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ad9250.o(i.ad9250_is_shadow_register))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_set_bits_to_reg
</UL>

<P><STRONG><a name="[73]"></a>ad9250_jesd204b_invert_logic</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ad9250.o(i.ad9250_jesd204b_invert_logic))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ad9250_jesd204b_invert_logic &rArr; ad9250_set_bits_to_reg &rArr; ad9250_write &rArr; spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_set_bits_to_reg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_read
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_setup
</UL>

<P><STRONG><a name="[75]"></a>ad9250_jesd204b_select_test_injection_point</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ad9250.o(i.ad9250_jesd204b_select_test_injection_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ad9250_jesd204b_select_test_injection_point &rArr; ad9250_set_bits_to_reg &rArr; ad9250_write &rArr; spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_set_bits_to_reg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_read
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_setup
</UL>

<P><STRONG><a name="[76]"></a>ad9250_jesd204b_set_frames</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ad9250.o(i.ad9250_jesd204b_set_frames))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ad9250_jesd204b_set_frames &rArr; ad9250_write &rArr; spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_read
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_setup
</UL>

<P><STRONG><a name="[77]"></a>ad9250_jesd204b_setup</STRONG> (Thumb, 544 bytes, Stack size 8 bytes, ad9250.o(i.ad9250_jesd204b_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ad9250_jesd204b_setup &rArr; ad9250_jesd204b_test_mode &rArr; ad9250_set_bits_to_reg &rArr; ad9250_write &rArr; spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_transfer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_set_bits_to_reg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_test_mode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_set_frames
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_select_test_injection_point
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_invert_logic
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_setup
</UL>

<P><STRONG><a name="[79]"></a>ad9250_jesd204b_test_mode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ad9250.o(i.ad9250_jesd204b_test_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ad9250_jesd204b_test_mode &rArr; ad9250_set_bits_to_reg &rArr; ad9250_write &rArr; spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_set_bits_to_reg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_read
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_setup
</UL>

<P><STRONG><a name="[70]"></a>ad9250_read</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ad9250.o(i.ad9250_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ad9250_read &rArr; spi_readbyte_glue &rArr; adc_ReadStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readbyte_glue
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_transfer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_soft_reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_set_bits_to_reg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_test_mode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_set_frames
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_select_test_injection_point
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_invert_logic
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_config_print
</UL>

<P><STRONG><a name="[74]"></a>ad9250_set_bits_to_reg</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ad9250.o(i.ad9250_set_bits_to_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ad9250_set_bits_to_reg &rArr; ad9250_write &rArr; spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_read
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_is_shadow_register
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_test_mode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_setup
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_select_test_injection_point
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_invert_logic
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_setup
</UL>

<P><STRONG><a name="[7c]"></a>ad9250_setup</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, ad9250.o(i.ad9250_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ad9250_setup &rArr; ad9250_jesd204b_setup &rArr; ad9250_jesd204b_test_mode &rArr; ad9250_set_bits_to_reg &rArr; ad9250_write &rArr; spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_transfer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_soft_reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_set_bits_to_reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_setup
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_fast_detect_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>ad9250_soft_reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ad9250.o(i.ad9250_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ad9250_soft_reset &rArr; ad9250_write &rArr; spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_setup
</UL>

<P><STRONG><a name="[78]"></a>ad9250_transfer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ad9250.o(i.ad9250_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ad9250_transfer &rArr; ad9250_write &rArr; spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_read
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_setup
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_setup
</UL>

<P><STRONG><a name="[72]"></a>ad9250_write</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ad9250.o(i.ad9250_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ad9250_write &rArr; spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_writebyte_glue
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_is_shadow_register
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_transfer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_soft_reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_set_bits_to_reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_setup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_jesd204b_set_frames
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_fast_detect_setup
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_setup
</UL>

<P><STRONG><a name="[7f]"></a>adc_ReadStatusRegister</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, adc_spi.o(i.adc_ReadStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = adc_ReadStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_cs_low
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_cs_high
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SendDummyByte
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SendByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SPI_LowLevel_AlterDirection
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readbyte_glue
</UL>

<P><STRONG><a name="[85]"></a>adc_SPI_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc_spi.o(i.adc_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adc_SPI_Init &rArr; adc_SPI_LowLevel_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_cs_high
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SPI_LowLevel_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>adc_SPI_LowLevel_AlterDirection</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_nucleo.o(i.adc_SPI_LowLevel_AlterDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adc_SPI_LowLevel_AlterDirection &rArr; SPI_BiDirectionalLineConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ReadStatusRegister
</UL>

<P><STRONG><a name="[86]"></a>adc_SPI_LowLevel_Init</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, stm32l1xx_nucleo.o(i.adc_SPI_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = adc_SPI_LowLevel_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SPI_Init
</UL>

<P><STRONG><a name="[81]"></a>adc_SendByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, adc_spi.o(i.adc_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_WriteStatusRegister
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ReadStatusRegister
</UL>

<P><STRONG><a name="[83]"></a>adc_SendDummyByte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc_spi.o(i.adc_SendDummyByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adc_SendDummyByte &rArr; SPI_I2S_GetFlagStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ReadStatusRegister
</UL>

<P><STRONG><a name="[87]"></a>adc_WriteStatusRegister</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, adc_spi.o(i.adc_WriteStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_cs_low
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_cs_high
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SendByte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_writebyte_glue
</UL>

<P><STRONG><a name="[84]"></a>adc_set_cs_high</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, adc_spi.o(i.adc_set_cs_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adc_set_cs_high &rArr; GPIO_SetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_WriteStatusRegister
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ReadStatusRegister
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SPI_Init
</UL>

<P><STRONG><a name="[80]"></a>adc_set_cs_low</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, adc_spi.o(i.adc_set_cs_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adc_set_cs_low &rArr; GPIO_ResetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_WriteStatusRegister
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ReadStatusRegister
</UL>

<P><STRONG><a name="[4f]"></a>assert_failed</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>

<P><STRONG><a name="[45]"></a>fputc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; USART_GetFlagStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[89]"></a>ltc6952_aux_config_global</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, ltc6952_aux.o(i.ltc6952_aux_config_global))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ltc6952_aux_config_global &rArr; uni_WriteBuffer &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_isConsistent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_WriteBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadBuffer
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>ltc6952_aux_config_out_dclk</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, ltc6952_aux.o(i.ltc6952_aux_config_out_dclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ltc6952_aux_config_out_dclk &rArr; uni_WriteBuffer &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_isConsistent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_WriteBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadBuffer
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>ltc6952_aux_config_out_sysref</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, ltc6952_aux.o(i.ltc6952_aux_config_out_sysref))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ltc6952_aux_config_out_sysref &rArr; uni_WriteBuffer &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_isConsistent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_WriteBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadBuffer
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>ltc6952_aux_config_srq</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, ltc6952_aux.o(i.ltc6952_aux_config_srq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ltc6952_aux_config_srq &rArr; uni_WriteBuffer &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_isConsistent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_WriteBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadBuffer
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>ltc6952_aux_detect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ltc6952_aux.o(i.ltc6952_aux_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ltc6952_aux_detect &rArr; uni_ReadStatusRegister &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadStatusRegister
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>ltc6952_aux_isConsistent</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ltc6952_aux.o(i.ltc6952_aux_isConsistent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ltc6952_aux_isConsistent
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_srq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_out_sysref
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_out_dclk
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_global
</UL>

<P><STRONG><a name="[92]"></a>ltc6952_aux_isOkay</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ltc6952_aux.o(i.ltc6952_aux_isOkay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ltc6952_aux_isOkay &rArr; uni_ReadStatusRegister &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadStatusRegister
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_aux_sync
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>ltc6953_master_aux_sync</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, ltc6953_master.o(i.ltc6953_master_aux_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ltc6953_master_aux_sync &rArr; ltc6952_aux_isOkay &rArr; uni_ReadStatusRegister &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_WriteStatusRegister
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_isOkay
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>ltc6953_master_config_global</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, ltc6953_master.o(i.ltc6953_master_config_global))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ltc6953_master_config_global &rArr; uni_WriteBuffer &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_isConsistent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_WriteBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadBuffer
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>ltc6953_master_config_outs</STRONG> (Thumb, 490 bytes, Stack size 64 bytes, ltc6953_master.o(i.ltc6953_master_config_outs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ltc6953_master_config_outs &rArr; uni_WriteBuffer &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_isConsistent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_WriteBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadBuffer
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>ltc6953_master_config_srq</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, ltc6953_master.o(i.ltc6953_master_config_srq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ltc6953_master_config_srq &rArr; uni_WriteBuffer &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_isConsistent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_WriteBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadBuffer
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>ltc6953_master_detect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ltc6953_master.o(i.ltc6953_master_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ltc6953_master_detect &rArr; uni_ReadStatusRegister &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadStatusRegister
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>ltc6953_master_isConsistent</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ltc6953_master.o(i.ltc6953_master_isConsistent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ltc6953_master_isConsistent
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_srq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_outs
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_global
</UL>

<P><STRONG><a name="[9a]"></a>ltc6953_master_isOkay</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ltc6953_master.o(i.ltc6953_master_isOkay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ltc6953_master_isOkay &rArr; uni_ReadStatusRegister &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadStatusRegister
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>main</STRONG> (Thumb, 708 bytes, Stack size 608 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = main &rArr; ad9250_setup &rArr; ad9250_jesd204b_setup &rArr; ad9250_jesd204b_test_mode &rArr; ad9250_set_bits_to_reg &rArr; ad9250_write &rArr; spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_isOkay
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_detect
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_srq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_outs
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_global
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_aux_sync
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_isOkay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_detect
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_srq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_out_sysref
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_out_dclk
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_global
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_SPI_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_setup
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_create
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_config_print
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Debug
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_USART_DEBUG_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Force_Sync_GPIOInit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7a]"></a>spi_readbyte_glue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ad9250.o(i.spi_readbyte_glue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spi_readbyte_glue &rArr; adc_ReadStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ReadStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_read
</UL>

<P><STRONG><a name="[7e]"></a>spi_writebyte_glue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ad9250.o(i.spi_writebyte_glue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spi_writebyte_glue &rArr; adc_WriteStatusRegister &rArr; adc_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_WriteStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9250_write
</UL>

<P><STRONG><a name="[9c]"></a>uni_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uni_spi.o(i.uni_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = uni_Init &rArr; uni_SPI_LowLevel_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SPI_LowLevel_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>uni_ReadBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, uni_spi.o(i.uni_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uni_ReadBuffer &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_set_cs_low
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_set_cs_high
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_srq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_outs
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_global
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_srq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_out_sysref
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_out_dclk
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_global
</UL>

<P><STRONG><a name="[91]"></a>uni_ReadStatusRegister</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uni_spi.o(i.uni_ReadStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uni_ReadStatusRegister &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_set_cs_low
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_set_cs_high
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_isOkay
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_detect
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_isOkay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_detect
</UL>

<P><STRONG><a name="[9e]"></a>uni_SPI_LowLevel_Init</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, stm32l1xx_nucleo.o(i.uni_SPI_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = uni_SPI_LowLevel_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_Init
</UL>

<P><STRONG><a name="[a0]"></a>uni_SendByte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uni_spi.o(i.uni_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_WriteStatusRegister
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_WriteBuffer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadStatusRegister
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadBuffer
</UL>

<P><STRONG><a name="[8a]"></a>uni_WriteBuffer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, uni_spi.o(i.uni_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uni_WriteBuffer &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_set_cs_low
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_set_cs_high
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_srq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_outs
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_config_global
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_srq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_out_sysref
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_out_dclk
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6952_aux_config_global
</UL>

<P><STRONG><a name="[94]"></a>uni_WriteStatusRegister</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uni_spi.o(i.uni_WriteStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uni_WriteStatusRegister &rArr; uni_SendByte &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_set_cs_low
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltc6953_master_aux_sync
</UL>

<P><STRONG><a name="[a1]"></a>uni_set_cs_high</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uni_spi.o(i.uni_set_cs_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uni_set_cs_high &rArr; GPIO_SetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_WriteBuffer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadStatusRegister
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadBuffer
</UL>

<P><STRONG><a name="[9f]"></a>uni_set_cs_low</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uni_spi.o(i.uni_set_cs_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uni_set_cs_low &rArr; GPIO_ResetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_WriteStatusRegister
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_WriteBuffer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadStatusRegister
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_ReadBuffer
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[67]"></a>SetSysClock</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, system_stm32l1xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6c]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[6e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6d]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
